import uk.ac.imperial.einst.access.RoleOf
import uk.ac.imperial.einst.ipower.Obl
import uk.ac.imperial.einst.ipower.Pow
import uk.ac.imperial.einst.resource.Appropriate
import uk.ac.imperial.einst.resource.Pool
import uk.ac.imperial.einst.resource.Provision
import uk.ac.imperial.einst.resource.Request

import java.util.ArrayList

global org.apache.log4j.Logger logger

declare Provision
	@role( event )
end

declare Appropriate
	@role( event )
end

query getAppropriations(Actor a)
	app : Appropriate(actor == a, valid == true, item : artifact, inst : inst)
end

query getPowProvision(Actor a)
	Pow(actor == a, act : action, this.matches(new Provision(a, null, null)))
end

rule "Provision"
	when
		$prov : Provision($a : actor, $i : inst, $item : artifact, valid == false)
		Pow(actor == $a, this.matches($prov), this before[-1s] $prov )
	then
		modify($prov) {
			setValid(true);
		}
end

rule "Pow Provision"
	when
		RoleOf($a : actor, $r : role, $i : inst)
		Pool(inst == $i, contribRoles contains $r, $type : artifactMatcher)
	then
		insertLogical( new Pow($a, new Provision($a, $i, $type)));
end

rule "Add provisions to pool"
	when
		$prov : Provision($i : inst, $item : artifact, valid == true)
		$p : Pool(inst == $i, artifactMatcher.matches($item))
		not( Pool.Added(pool == $p, prov == $prov ) )
	then
		modify($p) {
			getArtifacts().add($item);
		}
		insert($p.new Added($prov));
end

rule "Appropriate request"
	salience -1
	when
		$req : Request($a : actor, $i : inst, $query : query, $lim : limit, valid == false)
		accumulate(
			// provisions by other actors
			(and Provision($p : this, actor != $a, valid == true, inst == $i, $query.matches(artifact), $item : artifact)
			// have not yet been appropriated by $a
			not Appropriate(artifact == $item, actor == $a, inst == $i, valid == true) );
			$matched : collectList($p))
	then
		// limit appropriation count
		int count = $matched.size();
		if($lim > 0 && count > $lim)
			count = $lim;
		// appropriate matched
		for(int i=0; i< count; i++) {
			Appropriate app = new Appropriate($a, $i, ((Provision)$matched.get(i)).getArtifact());
			app.setT($req.getT());
			insert(app);
		}
		modify($req) {
			setValid(true);
		}
end

rule "Appropriate"
	when
		$app : Appropriate($a : actor, $i : inst, $item : artifact, valid == false)
		Provision(inst == $i, artifact == $item, valid == true, this before $app)
		Pow(actor == $a, this.matches($app), this before[-1s] $app )
	then
		modify($app) {
			setValid(true);
		}
end

rule "Pow Appropriate"
	when
		RoleOf($a : actor, $r : role, $i : inst)
		Pool(inst == $i, extractRoles contains $r, $type : artifactMatcher)
	then
		insertLogical( new Pow($a, new Appropriate($a, $i, $type)));
end
