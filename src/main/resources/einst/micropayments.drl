import uk.ac.imperial.einst.T
import uk.ac.imperial.einst.Actor

import uk.ac.imperial.einst.micropay.Account
import uk.ac.imperial.einst.micropay.Invoice
import uk.ac.imperial.einst.micropay.Transfer

import uk.ac.imperial.einst.ipower.Obl

global org.apache.log4j.Logger logger

declare Paid
	invoice : Invoice
end

declare Cleared
	transfer : Transfer
end

declare Bounced
	transfer : Transfer
end

declare Transfer
	@role( event )
	@expires( 11s )
end

query cleared(Transfer t)
	Cleared(t := transfer)
end

query account(Object holder)
	account : Account(holder := holder)
end

query debt(Object holder)
	Transfer( $tr: this, payer == holder, $am : amount )
	not( Cleared(transfer == $tr) )
	not( Bounced(transfer == $tr) )
end

query owed(Object holder, double amount)
	Transfer( $t: this, payee == holder, amount := amount )
	not( Cleared(transfer == $t) )
	not( Bounced(transfer == $t) )
end

rule "Pay Invoice"
	when
		$i : Invoice($p : payer, $q : amount)
		$a : Account(holder == $p, $b : balance, frozen == false)
		not( Paid($i;) )
	then
		logger.info("Paying invoice: "+ $i );
		modify($a) {
			setBalance( $b - $q );
		};
		insert(new Paid($i));
end

rule "Transfer"
	no-loop
	when
		$t: Transfer( $pr : payer, $pe : payee, $tp : toPay, toPay > 0 )
		$ar : Account($br : balance, holder == $pr, $min : minValue, frozen == false)
		$ae : Account($be : balance, holder == $pe, frozen == false)
	then
		double balanceAvail = $br - $min;
		double payNow = $tp;
		if(balanceAvail < 0) {
			payNow = 0;
		} else if(balanceAvail < payNow) {
			payNow = balanceAvail;
		}
		logger.info($pr +" pays "+ $pe +" "+ payNow +" from "+ balanceAvail +" (" + $t +")");
		modify($ar) {
			setBalance( $br - payNow );
		};
		modify($ae) {
			setBalance( $be + payNow );
		};
		modify($t) {
			setToPay($tp - payNow);
		};
end

rule "Cleared"
	when
		$t : Transfer( toPay <= 0 )
	then
		insert(new Cleared($t));
end

declare Snapshot
	t : int
	account : Account
end

rule "Account history"
	salience 1000
	when
		T($t : t)
		$a : Account()
		not( Snapshot($t, $a;) )
	then
		$a.snapshot();
		insert( new Snapshot($t, $a));
end

rule "Prune snapshots"
	when
		T($t : t)
		$s : Snapshot(t < $t)
	then
		retract($s);
end