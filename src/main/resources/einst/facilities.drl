import uk.ac.imperial.einst.Action
import uk.ac.imperial.einst.Institution
import uk.ac.imperial.einst.micropay.Invoice
import uk.ac.imperial.einst.resource.Appropriate
import uk.ac.imperial.einst.resource.Pool
import uk.ac.imperial.einst.resource.facility.Facility

import java.util.ArrayList

global org.apache.log4j.Logger logger

rule "Facility sunk costs"
	when
		$f : Facility($i : inst, $c : sunkCost)
		T($t : t)
		not( exists( Action(t > $t) ) )
		not( Invoice( payer == $i, payee == $f, ref == "sunk") )
	then
		insert( new Invoice($f, $i, "sunk", $c, $t) );
end

rule "Facility fixed costs"
	when
		$f : Facility($i : inst, $c : fixedCost, active == true)
		T($t : t)
		not( Invoice( payer == $i, payee == $f, ref == "fixed", t == $t) )
	then
		insert( new Invoice($f, $i, "fixed", $c, $t) );
end

rule "Facility marginal storage costs"
	salience -10
	when
		$f : Facility($i : inst, $c : marginalStorageCost, $pools : pools, active == true)
		T($t : t)
		not( Invoice( payer == $i, payee == $f, ref == "marginalStorage", t == $t) )
		accumulate( $p : Pool($pools contains this, inst == $i, $n : artifacts.size());
			$count : sum( $n ) )
	then
		insert( new Invoice($f, $i, "marginalStorage", $c * $count.intValue(), $t ) );
end

rule "Facility marginal transaction costs"
	salience -10
	when
		$f : Facility($i : inst, $c : marginalTransactionCost, $pools : pools, active == true)
		T($t : t)
		not( Invoice( payer == $i, payee == $f, ref == "marginalTransaction", t == $t) )
		accumulate( $a : Appropriate( t == $t, inst == $i, valid == true ); $count : count($a) )
	then
		logger.info($count + " appropriate actions");
		insert( new Invoice($f, $i, "marginalTransaction", $c * $count.intValue(), $t ) );
end
